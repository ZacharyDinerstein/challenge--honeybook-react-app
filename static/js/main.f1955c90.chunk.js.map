{"version":3,"sources":["header/searchBar/SearchBar.js","header/Header.js","cardContainer/card/cardImgWrapper/CardImgWrapper.js","cardContainer/card/cardTextWrapper/cardTextContainerTop/cardName/CardName.js","cardContainer/card/cardTextWrapper/cardTextContainerTop/cardSubTextContainer/cardJobTitle/CardJobTitle.js","cardContainer/card/cardTextWrapper/cardTextContainerTop/cardSubTextContainer/cardCompanyName/CardCompanyName.js","cardContainer/card/cardTextWrapper/cardTextContainerTop/cardSubTextContainer/divider/Divider.js","cardContainer/card/cardTextWrapper/cardTextContainerTop/cardSubTextContainer/CardSubTextContainer.js","cardContainer/card/cardTextWrapper/cardTextContainerTop/CardTextContainerTop.js","cardContainer/card/cardTextWrapper/cardTextContainerBottom/cardPhoneBlock/CardPhoneBlock.js","cardContainer/card/cardTextWrapper/cardTextContainerBottom/cardEmail/CardEmail.js","cardContainer/card/cardTextWrapper/cardTextContainerBottom/CardTextContainerBottom.js","cardContainer/card/cardTextWrapper/CardTextWrapper.js","cardContainer/card/Card.js","cardContainer/CardContainer.js","app/App.js","serviceWorker.js","index.js"],"names":["SearchBar","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","type","placeholder","onChange","props","handleChange","index_es","icon","faSearch","React","Component","Header","SearchBar_SearchBar","CardImgWrapper","src","profileImage","alt","CardName","name","CardJobTitle","job","CardCompanyname","company","Divider","textContainerIsMultiLine","CardSubTextContainer","_this","call","myRef","createRef","state","current","offsetHeight","setState","ref","cardJobTitle_CardJobTitle","divider_Divider","CardCompanyName","CardTextContainerTop","cardName_CardName","CardSubTextContainer_CardSubTextContainer","CardPhoneBlock","phone","CardEmail","email","CardTextContainerBottom","cardPhoneBlock_CardPhoneBlock","cardEmail_CardEmail","CardTextWrapper","cardTextContainerTop_CardTextContainerTop","cardTextContainerBottom_CardTextContainerBottom","Card","cardImgWrapper_CardImgWrapper","cardTextWrapper_CardTextWrapper","CardContainer","filteredData","map","item","index","Card_Card","company_name","profile_image","App","data","bind","assertThisInitialized","_this2","fetch","then","response","json","responseJson","e","newList","target","filter","profile","profileAsString","toLowerCase","includes","Header_Header","cardContainer_CardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1955c90.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nexport class SearchBar extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"search-bar\">\n\t\t\t\t<input type=\"text\" className=\"input\" placeholder=\"search...\" onChange={this.props.handleChange} />\n\t\t\t\t<FontAwesomeIcon icon={faSearch} />\n\t\t\t</div>\n\t\t);\n\t}\n}","import React from 'react';\nimport './searchBar/SearchBar.scss';\nimport { SearchBar } from './searchBar/SearchBar.js';\n\n\nexport class Header extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<header className=\"container-fluid\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-sm-1\"></div>\n\t\t\t\t\t<div className=\"col-sm-5\">\n\t\t\t\t\t\t<h1>Contact List</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-sm-5\">\n\t\t\t\t\t\t<SearchBar handleChange={this.props.handleChange} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t);\n\t}\n}","import React from 'react';\n\nconst CardImgWrapper = props => {\n\treturn (\n\t\t<div className=\"card__img-wrapper\">\n\t\t\t<img src={props.profileImage} alt=\"\" className=\"card__img--profile-image\" />\n\t\t\t<img src={props.icon} alt=\"\" className=\"card__img--icon\" />\n\t\t</div>\n\t);\n}\n\nexport  default CardImgWrapper","import React from 'react';\n\nconst CardName = props => {\n\n\treturn <h2 className=\"card__name\">{props.name}</h2>\n}\n\nexport  default CardName","import React from 'react';\n\nconst CardJobTitle = props => {\n\n\tlet jobTitle= (!props.job) ? '' : <p className=\"card__job-title\">{props.job}</p>;\n\treturn jobTitle;\n\n}\n\nexport default CardJobTitle","import React from 'react';\n\nconst CardCompanyname = props => {\n\n\tlet companyName = (!props.company) ? '' : <p className=\"card__company-name\">{props.company}</p>;\n\treturn companyName \n\n}\n\nexport default CardCompanyname","import React from 'react';\n\nconst Divider = props => {\n\n\tlet divider;\n\n\t// If User didn't enter a job or company, divider should be an empty space\n\tif (!props.job || !props.company) {\n\t\tdivider = '';\n\n\t// else, if the amount of text in the SubTextContainer already caused a line break, \n\t// divider should be a <br /> tag. This ensures that there will always be a break\n\t// between the job and company lines, even if -- after the divider is removed\n\t// from the dom -- the SubTextContainer is reduced to one line. We want that \n\t// line break on the page. \n\t} else if (props.textContainerIsMultiLine){\n\t\tdivider = <br/>;\n\n\t// Otherwise, if User job and company are filled in correctly, \n\t// and the content of that information doesn't cause a line\n\t// break, then show the divider. \n\t} else {\n\t\tdivider = <p className=\"card__text--divider\">|</p>;\n\t}\n\n\treturn divider;\n\n}\n\nexport default Divider","import React from 'react';\nimport CardJobTitle from './cardJobTitle/CardJobTitle.js';\nimport CardCompanyName from './cardCompanyName/CardCompanyName.js';\nimport Divider from './divider/Divider.js';\n\nexport class CardSubTextContainer extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.myRef = React.createRef();\n\n\t\tthis.state = {\n\t\t\ttextContainerIsMultiLine: false \n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst textContainerheight = this.myRef.current.offsetHeight;\n\n\t\tif (textContainerheight > 24){\n\t\t\tthis.setState({\n\t\t\t\ttextContainerIsMultiLine: true\n\t\t\t});\n\t\t}\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"card__sub-text-container\" ref={this.myRef}>\n\t\t\t\t<CardJobTitle job={this.props.job} />\n\t\t\t\t<Divider job={this.props.job} company={this.props.company} textContainerIsMultiLine={this.state.textContainerIsMultiLine} />\n\t\t\t\t<CardCompanyName company={this.props.company} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default CardSubTextContainer;","import React from 'react';\nimport CardName from './cardName/CardName.js';\nimport { CardSubTextContainer } from './cardSubTextContainer/CardSubTextContainer.js';\n\n\nconst CardTextContainerTop = props => {\n\n\treturn (\n\t\t<div className=\"card__text-container--top\">\n\t\t\t<CardName name={props.name} />\n\t\t\t<CardSubTextContainer job={props.job} company={props.company} />\n\t\t</div>\n\t);\n}\n\nexport  default CardTextContainerTop","import React from 'react';\n\n\nconst CardPhoneBlock = props => {\n\n\tlet phoneBlock = (!props.phone) ? '' : <div className=\"card__phone-num-wrapper\"><p className=\"card__phone-num--label\">Phone Number</p><p className=\"card__phone-num\">{props.phone}</p></div>;\n\treturn phoneBlock;\n\n}\n\nexport default CardPhoneBlock","import React from 'react';\n\n\nconst CardEmail = props => {\n\n\tlet email = (!props.email) ? '' : <p className=\"card__email\">{props.email}</p>;\n\treturn email;\n}\n\nexport default CardEmail","import React from 'react';\nimport CardPhoneBlock from './cardPhoneBlock/CardPhoneBlock.js';\nimport CardEmail from './cardEmail/CardEmail.js';\n\n\nconst CardTextContainerBottom = props => {\n\n\treturn (\n\t\t<div className=\"card__text-container--bottom card__sub-text-container\">\n\t\t\t<CardPhoneBlock phone={props.phone} />\n\t\t\t<CardEmail email={props.email}/>\n\t\t</div>\n\t);\n}\n\nexport  default CardTextContainerBottom","import React from 'react';\nimport CardTextContainerTop from './cardTextContainerTop/CardTextContainerTop.js';\nimport CardTextContainerBottom from './cardTextContainerBottom/CardTextContainerBottom.js';\n\n\nconst CardTextWrapper = props => {\n\n\treturn (\n\t\t<div className=\"card__text-wrapper\">\n\t\t\t<CardTextContainerTop name={props.name} job={props.job} company={props.company} />\n\t\t\t<CardTextContainerBottom phone={props.phone} email={props.email} />\n\t\t</div>\n\t);\n}\n\nexport  default CardTextWrapper","import React from 'react';\nimport CardImgWrapper from './cardImgWrapper/CardImgWrapper.js';\nimport CardTextWrapper from './cardTextWrapper/CardTextWrapper.js';\n\n\nexport class Card extends React.Component {\n\trender(){\n\t\t\n\t\treturn (\n\t\t\t<div className=\"col-xs-12 col-sm-10 offset-sm-1 col-md-6 offset-md-0 col-lg-4 col-xl-3\">\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<CardImgWrapper profileImage={this.props.profileImage} icon={this.props.icon} />\n\t\t\t\t\t<CardTextWrapper name={this.props.name} job={this.props.job} company={this.props.company} phone={this.props.phone} email={this.props.email} />\n\t\t\t\t\t<div className=\"card__cover\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React from 'react';\nimport './card/Card.scss';\nimport { Card } from './card/Card.js';\n\n\nconst CardContainer = props => {\n\n\t// Display Cards on page based on the \n\t// contents of state.filteredData\n\treturn (\n\t\t<main className=\"card-container container\">\n\t\t\t<div className=\"row\">\n\t\t\t\t{props.filteredData.map((item, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tname={item.name}\n\t\t\t\t\t\t\tjob={item.job}\n\t\t\t\t\t\t\tcompany={item.company_name}\n\t\t\t\t\t\t\tprofileImage={item.profile_image}\n\t\t\t\t\t\t\ticon={item.icon}\n\t\t\t\t\t\t\tphone={item.phone}\n\t\t\t\t\t\t\temail={item.email}\n\t\t\t\t\t\t\tkey={index} />\n\t\t\t\t\t\n\t\t\t\t)})}\n\t\t\t</div>\n\t\t</main>\n\t);\n\n}\n\nexport  default CardContainer","import React from 'react';\n\nimport './App.scss';\nimport '../header/Header.scss';\nimport { Header } from '../header/Header.js';\nimport CardContainer from '../cardContainer/CardContainer.js';\n\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      filteredData: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // Grab our JSON data and attach that data to state.data.\n  // Then, set filteredData to state.data.\n  // We'll use filteredData to render our cards.\n\n  componentDidMount() {\n    fetch(\"https://candidate-test.herokuapp.com/contacts\")\n     .then(response => {\n       return response.json();\n     })\n     .then(responseJson => {\n       this.setState({ \n        data: responseJson \n      }, function(){\n        this.setState({\n          filteredData: this.state.data\n        });\n      });\n     })\n  }\n\n\n  // Updated what Cards we show based on User's search\n  // in the search bar\n\n  handleChange(e) {\n    let currentList = [];\n    let newList = [];\n\n    if (e.target.value !== \"\") {\n      currentList = this.state.data;\n\n      newList = currentList.filter(profile => {\n\n        // Take the data that will form the contents of our Cards\n        // and convert that data into one giant string.\n        // (Leave out data referring to images, as we don't want users\n        // searching for cards based on the random letters included\n        // in an img's src url.)\n\n        let profileAsString = '';\n        for ( var key in profile ) {  \n          if (key !== \"icon\" && key !== \"profile_image\"){\n            profileAsString +=  ' ' + profile[key].toLowerCase();\n          }\n        }\n\n        // Change search term to lowercase\n        // (Searching only with lowercase characters eliminates \n        // any possible capitalization conflicts.)\n        const filter = e.target.value.toLowerCase();\n\n        // Check to see if a Card's contents includes the User's search term.\n        // If it does, Card contents will be added to newList \n        // and eventually displayed on screen. \n        return profileAsString.includes(filter);\n      });\n\n    } else {\n\n      // If a user's search doens't match the contents of\n      // any Card, display all Cards on screen.\n      newList = this.state.data;\n    }\n\n    this.setState({\n      filteredData: newList\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <Header handleChange={this.handleChange} />\n        <CardContainer filteredData={this.state.filteredData} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}